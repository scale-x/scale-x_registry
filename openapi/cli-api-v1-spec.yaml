openapi: 3.0.3
info:
  title: Scale-x registry CLI API
  description: |-
    Api for communication between cli tool and registry
  version: 1.0.0
servers:
  - url: http://localhost/api/cli/v1
paths:
  /package:
    post:
      tags:
        - package
      summary: Add new package
      operationId: addPackage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Package"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Package"
        "405":
          description: Invalid input

  /package/{scope}/{package}:
    get:
      tags:
        - package
      summary: get a single package
      parameters:
        - name: scope
          in: path
          required: true
          schema:
            example: global
            default: global
            $ref: "#/components/schemas/ScalarScope"
        - name: package
          in: path
          required: true
          schema:
            example: package
            $ref: "#/components/schemas/ScalarPackage"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Package"
        "404":
          description: Package not found
        "405":
          description: Validation exception

  /package/{scope}/{package}/version/{version}/config:
    post:
      tags:
        - config
      summary: Add config file for version
      parameters:
        - name: scope
          in: path
          required: true
          schema:
            example: global
            default: global
            $ref: "#/components/schemas/ScalarScope"
        - name: package
          in: path
          required: true
          schema:
            example: package
            $ref: "#/components/schemas/ScalarPackage"
        - name: version
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ScalarVersion"
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    get:
      tags:
        - config
      parameters:
        - name: scope
          in: path
          required: true
          schema:
            example: global
            default: global
            $ref: "#/components/schemas/ScalarScope"
        - name: package
          in: path
          required: true
          schema:
            example: package
            $ref: "#/components/schemas/ScalarPackage"
        - name: version
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ScalarVersion"
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  /package/{scope}/{package}/version:
    post:
      tags:
        - version
      summary: Add new version of package
      parameters:
        - name: scope
          in: path
          required: true
          schema:
            example: global
            default: global
            $ref: "#/components/schemas/ScalarScope"
        - name: package
          in: path
          required: true
          schema:
            example: package
            $ref: "#/components/schemas/ScalarPackage"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Version"
      responses:
        "200":
          description: Successful operation

    get:
      tags:
        - version
      summary: Get all versions for package
      parameters:
        - name: scope
          in: path
          required: true
          schema:
            example: global
            default: global
            $ref: "#/components/schemas/ScalarScope"
        - name: package
          in: path
          required: true
          schema:
            example: package
            $ref: "#/components/schemas/ScalarPackage"
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 1000
            format: int32
            example: 0
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 1000
            example: 5
      responses:
        "200":
          # TODO Add response body - list of versions with total for pagination
          description: Successful response

  /package/{scope}/{package}/version/{version}/mode/{mode}/engine/{engine}/artifact:
    post:
      tags:
        - artifact
      summary: Add artifact for package version by mode and entity
      parameters:
        - name: scope
          in: path
          required: true
          schema:
            example: global
            default: global
            $ref: "#/components/schemas/ScalarScope"
        - name: package
          in: path
          required: true
          schema:
            example: package
            $ref: "#/components/schemas/ScalarPackage"
        - name: version
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ScalarVersion"
        - name: mode
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ScalarMode"
        - name: engine
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ScalarEngine"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Version"
      responses:
        "200":
          description: Successful operation

    get:
      tags:
        - artifact
      summary: Get artifact package version by mode and engine
      parameters:
        - name: scope
          in: path
          required: true
          schema:
            example: global
            default: global
            $ref: "#/components/schemas/ScalarScope"
        - name: package
          in: path
          required: true
          schema:
            example: package
            $ref: "#/components/schemas/ScalarPackage"
        - name: version
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ScalarVersion"
        - name: mode
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ScalarMode"
        - name: engine
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ScalarEngine"
      responses:
        "200":
          description: Successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

security:
  - petstore_auth: []
components:
  schemas:
    ScalarScope:
      example: company
      type: string
      minLength: 3
      maxLength: 50
      pattern: "^[a-z]*$"
    ScalarPackage:
      example: cart-backend
      type: string
      minLength: 3
      maxLength: 50
      pattern: "^[a-z]{1}[a-z0-9-]*[a-z0-9]?(-[a-z0-9]{1,50})$"
    ScalarVersion:
      example: 1.0.0-alpha-01
      type: string
      pattern: ^[0-9]{1,10}\.[0-9]{1,10}\.[0-9]{1,10}?(-[a-z]{1}[a-z0-9\-]{1,49})$
    ScalarMode:
      example: dev
      type: string
      pattern: ^[a-z]{1,50}$
    ScalarEngine:
      example: compose
      type: string
      enum:
        - compose
        - kubernetes
    Package:
      type: object
      properties:
        scope:
          $ref: "#/components/schemas/ScalarScope"
        name:
          $ref: "#/components/schemas/ScalarPackage"
        owner:
          type: string
          format: email
          example: author@mail.com
    Version:
      type: object
      properties:
        major:
          type: integer
          format: int32
          example: 0
        minor:
          type: integer
          format: int32
          example: 1
        patch:
          type: integer
          format: int32
          example: 0
        postfix:
          example: alpha
          type: string
          minLength: 1
          maxLength: 50
          pattern: "^[a-z0-9-]$"
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
